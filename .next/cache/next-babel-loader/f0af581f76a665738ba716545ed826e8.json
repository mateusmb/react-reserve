{"ast":null,"code":"import User from \"../../models/User\";\nimport jwt from \"jsonwebtoken\";\nimport connectDb from \"../../utils/connectDb\";\nconnectDb();\nexport default (async (req, res) => {\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).send(\"No authorization token\");\n  }\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n    const user = await User.findOne({\n      _id: userId\n    });\n\n    if (user) {\n      res.status(200).json(user);\n    } else {\n      res.status(404).send(\"User not found\");\n    }\n  } catch (error) {\n    res.status(403).send(\"Invalid token\");\n  }\n});","map":{"version":3,"sources":["/home/magikoopa/Dev/react-reserve/pages/api/account.js"],"names":["User","jwt","connectDb","req","res","headers","status","send","userId","verify","authorization","process","env","JWT_SECRET","user","findOne","_id","json","error"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,mBAAjB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AAEAA,SAAS;AAET,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,MAAI,EAAE,mBAAmBD,GAAG,CAACE,OAAzB,CAAJ,EAAuC;AACrC,WAAOD,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,wBAArB,CAAP;AACD;;AAED,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAaP,GAAG,CAACQ,MAAJ,CACjBN,GAAG,CAACE,OAAJ,CAAYK,aADK,EAEjBC,OAAO,CAACC,GAAR,CAAYC,UAFK,CAAnB;AAIA,UAAMC,IAAI,GAAG,MAAMd,IAAI,CAACe,OAAL,CAAa;AAAEC,MAAAA,GAAG,EAAER;AAAP,KAAb,CAAnB;;AACA,QAAIM,IAAJ,EAAU;AACRV,MAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqBH,IAArB;AACD,KAFD,MAEO;AACLV,MAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,gBAArB;AACD;AACF,GAXD,CAWE,OAAOW,KAAP,EAAc;AACdd,IAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,eAArB;AACD;AACF,CAnBD","sourcesContent":["import User from \"../../models/User\";\nimport jwt from \"jsonwebtoken\";\nimport connectDb from \"../../utils/connectDb\";\n\nconnectDb();\n\nexport default async (req, res) => {\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).send(\"No authorization token\");\n  }\n\n  try {\n    const { userId } = jwt.verify(\n      req.headers.authorization,\n      process.env.JWT_SECRET\n    );\n    const user = await User.findOne({ _id: userId });\n    if (user) {\n      res.status(200).json(user);\n    } else {\n      res.status(404).send(\"User not found\");\n    }\n  } catch (error) {\n    res.status(403).send(\"Invalid token\");\n  }\n};\n"]},"metadata":{},"sourceType":"module"}