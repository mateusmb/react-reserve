{"ast":null,"code":"import User from \"../../models/User\";\nimport jwt from \"jsonwebtoken\";\nimport connectDb from \"../../utils/connectDb\";\nconnectDb();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await handleGetRequest(req, res);\n      break;\n\n    case \"PUT\":\n      await handlePutRequest(req, res);\n      break;\n\n    default:\n      res.status(405).send(`Method ${req.method} not allowed`);\n      break;\n  }\n});\n\nasync function handleGetRequest(req, res) {\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).send(\"No authorization token\");\n  }\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n    const user = await User.findOne({\n      _id: userId\n    });\n\n    if (user) {\n      res.status(200).json(user);\n    } else {\n      res.status(404).send(\"User not found\");\n    }\n  } catch (error) {\n    res.status(403).send(\"Invalid token\");\n  }\n}\n\n;\n\nasync function handlePutRequest(req, res) {\n  const {\n    _id,\n    role\n  } = req.body;\n  await User.findOneAndUpdate({\n    _id\n  }, {\n    role\n  });\n  res.status(203).send('User updated');\n}","map":{"version":3,"sources":["/home/magikoopa/Dev/react-reserve/pages/api/account.js"],"names":["User","jwt","connectDb","req","res","method","handleGetRequest","handlePutRequest","status","send","headers","userId","verify","authorization","process","env","JWT_SECRET","user","findOne","_id","json","error","role","body","findOneAndUpdate"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,mBAAjB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AAEAA,SAAS;AAET,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,UAAQD,GAAG,CAACE,MAAZ;AACE,SAAK,KAAL;AACE,YAAMC,gBAAgB,CAACH,GAAD,EAAMC,GAAN,CAAtB;AACA;;AACF,SAAK,KAAL;AACE,YAAMG,gBAAgB,CAACJ,GAAD,EAAMC,GAAN,CAAtB;AACA;;AAEF;AACEA,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAsB,UAASN,GAAG,CAACE,MAAO,cAA1C;AACA;AAVJ;AAYD,CAbD;;AAeA,eAAeC,gBAAf,CAAgCH,GAAhC,EAAqCC,GAArC,EAA0C;AACxC,MAAI,EAAE,mBAAmBD,GAAG,CAACO,OAAzB,CAAJ,EAAuC;AACrC,WAAON,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,wBAArB,CAAP;AACD;;AAED,MAAI;AACF,UAAM;AAAEE,MAAAA;AAAF,QAAaV,GAAG,CAACW,MAAJ,CACjBT,GAAG,CAACO,OAAJ,CAAYG,aADK,EAEjBC,OAAO,CAACC,GAAR,CAAYC,UAFK,CAAnB;AAIA,UAAMC,IAAI,GAAG,MAAMjB,IAAI,CAACkB,OAAL,CAAa;AAAEC,MAAAA,GAAG,EAAER;AAAP,KAAb,CAAnB;;AACA,QAAIM,IAAJ,EAAU;AACRb,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBY,IAAhB,CAAqBH,IAArB;AACD,KAFD,MAEO;AACLb,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,gBAArB;AACD;AACF,GAXD,CAWE,OAAOY,KAAP,EAAc;AACdjB,IAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,eAArB;AACD;AACF;;AAAA;;AAED,eAAeF,gBAAf,CAAgCJ,GAAhC,EAAqCC,GAArC,EAA0C;AACxC,QAAM;AAAEe,IAAAA,GAAF;AAAOG,IAAAA;AAAP,MAAgBnB,GAAG,CAACoB,IAA1B;AACA,QAAMvB,IAAI,CAACwB,gBAAL,CACJ;AAAEL,IAAAA;AAAF,GADI,EAEJ;AAAEG,IAAAA;AAAF,GAFI,CAAN;AAIAlB,EAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,cAArB;AACD","sourcesContent":["import User from \"../../models/User\";\nimport jwt from \"jsonwebtoken\";\nimport connectDb from \"../../utils/connectDb\";\n\nconnectDb();\n\nexport default async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await handleGetRequest(req, res);\n      break;\n    case \"PUT\":\n      await handlePutRequest(req, res);\n      break;\n  \n    default:\n      res.status(405).send(`Method ${req.method} not allowed`)\n      break;\n  }\n}\n\nasync function handleGetRequest(req, res) {\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).send(\"No authorization token\");\n  }\n\n  try {\n    const { userId } = jwt.verify(\n      req.headers.authorization,\n      process.env.JWT_SECRET\n    );\n    const user = await User.findOne({ _id: userId });\n    if (user) {\n      res.status(200).json(user);\n    } else {\n      res.status(404).send(\"User not found\");\n    }\n  } catch (error) {\n    res.status(403).send(\"Invalid token\");\n  }\n};\n\nasync function handlePutRequest(req, res) {\n  const { _id, role } = req.body\n  await User.findOneAndUpdate(\n    { _id },\n    { role }\n  )\n  res.status(203).send('User updated')\n}\n"]},"metadata":{},"sourceType":"module"}