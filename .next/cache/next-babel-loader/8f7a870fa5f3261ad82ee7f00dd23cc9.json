{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/magikoopa/Dev/react-reserve/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport App from \"next/app\";\nimport Layout from \"../components/_App/Layout\";\nimport { parseCookies, destroyCookie } from \"nookies\";\nimport { redirectUser } from \"../utils/auth\";\nimport baseUrl from \"../utils/baseUrl\";\nimport axios from \"axios\";\nimport Router from \"next/router\";\n\nclass MyApp extends App {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"syncLogout\", event => {\n      if (event.key === \"logout\") {\n        console.log(\"logged out from storage\");\n        Router.push(\"/login\");\n      }\n    });\n  }\n\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    const {\n      token\n    } = parseCookies(ctx);\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n\n    if (!token) {\n      const isProtectedRoute = ctx.pathname === \"/account\" || ctx.pathname === \"/create\";\n\n      if (isProtectedRoute) {\n        redirectUser(ctx, \"/login\");\n      }\n    } else {\n      try {\n        const payload = {\n          headers: {\n            Authorization: token\n          }\n        };\n        const url = `${baseUrl}/api/account`;\n        const response = await axios.get(url, payload);\n        const user = response.data;\n        const isRoot = user.role === \"root\";\n        const isAdmin = user.role === \"admin\"; // if authenticated, but not of role 'admin' or 'root', redirect from '/create' page\n\n        const isNotPermitted = !(isRoot || isAdmin) && ctx.pathname === \"/create\";\n\n        if (isNotPermitted) {\n          redirectUser(ctx, \"/\");\n        }\n\n        pageProps.user = user;\n      } catch (error) {\n        console.error(\"Error getting current user\", error); // 1) Throw out invalid token\n\n        destroyCookie(ctx, \"token\"); // 2) Redirect to login\n\n        redirectUser(ctx, \"/login\");\n      }\n    }\n\n    return {\n      pageProps\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"storage\", this.syncLogout);\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps\n    } = this.props;\n    return __jsx(Layout, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), __jsx(Component, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default MyApp;","map":{"version":3,"sources":["/home/magikoopa/Dev/react-reserve/pages/_app.js"],"names":["App","Layout","parseCookies","destroyCookie","redirectUser","baseUrl","axios","Router","MyApp","event","key","console","log","push","getInitialProps","Component","ctx","token","pageProps","isProtectedRoute","pathname","payload","headers","Authorization","url","response","get","user","data","isRoot","role","isAdmin","isNotPermitted","error","componentDidMount","window","addEventListener","syncLogout","render","props"],"mappings":"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","sourcesContent":["import App from \"next/app\";\nimport Layout from \"../components/_App/Layout\";\nimport { parseCookies, destroyCookie } from \"nookies\";\nimport { redirectUser } from \"../utils/auth\";\nimport baseUrl from \"../utils/baseUrl\";\nimport axios from \"axios\";\nimport Router from \"next/router\";\n\nclass MyApp extends App {\n  static async getInitialProps({ Component, ctx }) {\n    const { token } = parseCookies(ctx);\n\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n\n    if (!token) {\n      const isProtectedRoute =\n        ctx.pathname === \"/account\" || ctx.pathname === \"/create\";\n      if (isProtectedRoute) {\n        redirectUser(ctx, \"/login\");\n      }\n    } else {\n      try {\n        const payload = { headers: { Authorization: token } };\n        const url = `${baseUrl}/api/account`;\n        const response = await axios.get(url, payload);\n        const user = response.data;\n        const isRoot = user.role === \"root\";\n        const isAdmin = user.role === \"admin\";\n        // if authenticated, but not of role 'admin' or 'root', redirect from '/create' page\n        const isNotPermitted =\n          !(isRoot || isAdmin) && ctx.pathname === \"/create\";\n        if (isNotPermitted) {\n          redirectUser(ctx, \"/\");\n        }\n        pageProps.user = user;\n      } catch (error) {\n        console.error(\"Error getting current user\", error);\n        // 1) Throw out invalid token\n        destroyCookie(ctx, \"token\");\n        // 2) Redirect to login\n        redirectUser(ctx, \"/login\");\n      }\n    }\n\n    return { pageProps };\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"storage\", this.syncLogout);\n  }\n\n  syncLogout = event => {\n    if (event.key === \"logout\") {\n      console.log(\"logged out from storage\");\n      Router.push(\"/login\");\n    }\n  };\n\n  render() {\n    const { Component, pageProps } = this.props;\n    return (\n      <Layout {...pageProps}>\n        <Component {...pageProps} />\n      </Layout>\n    );\n  }\n}\n\nexport default MyApp;"]},"metadata":{},"sourceType":"module"}