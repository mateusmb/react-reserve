{"ast":null,"code":"import mongoose from \"mongoose\";\nimport jwt from \"jsonwebtoken\";\nimport Cart from \"../../models/Cart\";\nimport connectDb from \"../../utils/connectDb\";\nconnectDb();\nconst {\n  ObjectId\n} = mongoose.Types;\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await handleGetRequest(req, res);\n      break;\n\n    case \"PUT\":\n      await handlePutRequest(req, res);\n      break;\n\n    case \"DELETE\":\n      await handleDeleteRequest(req, res);\n      break;\n\n    default:\n      res.status(405).send(`Method ${req.method} not allowed`);\n      break;\n  }\n});\n\nasync function handleGetRequest(req, res) {\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).send(\"No authorization token\");\n  }\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n    const cart = await Cart.findOne({\n      user: userId\n    }).populate({\n      path: \"products.product\",\n      model: \"Product\"\n    });\n    res.status(200).json(cart.products);\n  } catch (error) {\n    console.error(error);\n    res.status(403).send(\"Please login again\");\n  }\n}\n\nasync function handlePutRequest(req, res) {\n  const {\n    quantity,\n    productId\n  } = req.body;\n\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).send(\"No authorization token\");\n  }\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET); // Get user cart based on userId\n\n    const cart = await Cart.findOne({\n      user: userId\n    }); // Check if product already exists in cart\n\n    const productExists = cart.products.some(doc => ObjectId(productId).equals(doc.product)); // If so, increment quantity (by number provided to request)\n\n    if (productExists) {\n      await Cart.findOneAndUpdate({\n        _id: cart._id,\n        \"products.product\": productId\n      }, {\n        $inc: {\n          \"products.$.quantity\": quantity\n        }\n      });\n    } else {\n      // If not, add new product with given quantity\n      const newProduct = {\n        quantity,\n        product: productId\n      };\n      await Cart.findOneAndUpdate({\n        _id: cart._id\n      }, {\n        $addToSet: {\n          products: newProduct\n        }\n      });\n    }\n\n    res.status(200).send(\"Cart updated\");\n  } catch (error) {\n    console.error(error);\n    res.status(403).send(\"Please login again\");\n  }\n}\n\nasync function handleDeleteRequest(req, res) {\n  const {\n    productId\n  } = req.query;\n\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).send(\"No authorization token\");\n  }\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n    const cart = await Cart.findOneAndUpdate({\n      user: userId\n    }, {\n      $pull: {\n        products: {\n          product: productId\n        }\n      }\n    }, {\n      new: true\n    }).populate({\n      path: \"products.product\",\n      model: \"Product\"\n    });\n    res.status(200).json(cart.products);\n  } catch (error) {\n    console.error(error);\n    res.status(403).send(\"Please login again\");\n  }\n}","map":{"version":3,"sources":["/home/magikoopa/Dev/react-reserve/pages/api/cart.js"],"names":["mongoose","jwt","Cart","connectDb","ObjectId","Types","req","res","method","handleGetRequest","handlePutRequest","handleDeleteRequest","status","send","headers","userId","verify","authorization","process","env","JWT_SECRET","cart","findOne","user","populate","path","model","json","products","error","console","quantity","productId","body","productExists","some","doc","equals","product","findOneAndUpdate","_id","$inc","newProduct","$addToSet","query","$pull","new"],"mappings":"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","sourcesContent":["import mongoose from \"mongoose\";\nimport jwt from \"jsonwebtoken\";\nimport Cart from \"../../models/Cart\";\nimport connectDb from \"../../utils/connectDb\";\n\nconnectDb();\n\nconst { ObjectId } = mongoose.Types;\n\nexport default async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await handleGetRequest(req, res);\n      break;\n    case \"PUT\":\n      await handlePutRequest(req, res);\n      break;\n    case \"DELETE\":\n      await handleDeleteRequest(req, res);\n      break;\n    default:\n      res.status(405).send(`Method ${req.method} not allowed`);\n      break;\n  }\n};\n\nasync function handleGetRequest(req, res) {\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).send(\"No authorization token\");\n  }\n  try {\n    const { userId } = jwt.verify(\n      req.headers.authorization,\n      process.env.JWT_SECRET\n    );\n    const cart = await Cart.findOne({ user: userId }).populate({\n      path: \"products.product\",\n      model: \"Product\"\n    });\n    res.status(200).json(cart.products);\n  } catch (error) {\n    console.error(error);\n    res.status(403).send(\"Please login again\");\n  }\n}\n\nasync function handlePutRequest(req, res) {\n  const { quantity, productId } = req.body;\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).send(\"No authorization token\");\n  }\n  try {\n    const { userId } = jwt.verify(\n      req.headers.authorization,\n      process.env.JWT_SECRET\n    );\n    // Get user cart based on userId\n    const cart = await Cart.findOne({ user: userId });\n    // Check if product already exists in cart\n    const productExists = cart.products.some(doc =>\n      ObjectId(productId).equals(doc.product)\n    );\n    // If so, increment quantity (by number provided to request)\n    if (productExists) {\n      await Cart.findOneAndUpdate(\n        { _id: cart._id, \"products.product\": productId },\n        { $inc: { \"products.$.quantity\": quantity } }\n      );\n    } else {\n      // If not, add new product with given quantity\n      const newProduct = { quantity, product: productId };\n      await Cart.findOneAndUpdate(\n        { _id: cart._id },\n        { $addToSet: { products: newProduct } }\n      );\n    }\n    res.status(200).send(\"Cart updated\");\n  } catch (error) {\n    console.error(error);\n    res.status(403).send(\"Please login again\");\n  }\n}\n\nasync function handleDeleteRequest(req, res) {\n  const { productId } = req.query;\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).send(\"No authorization token\");\n  }\n  try {\n    const { userId } = jwt.verify(\n      req.headers.authorization,\n      process.env.JWT_SECRET\n    );\n    const cart = await Cart.findOneAndUpdate(\n      { user: userId },\n      { $pull: { products: { product: productId } } },\n      { new: true }\n    ).populate({\n      path: \"products.product\",\n      model: \"Product\"\n    });\n    res.status(200).json(cart.products);\n  } catch (error) {\n    console.error(error);\n    res.status(403).send(\"Please login again\");\n  }\n}\n"]},"metadata":{},"sourceType":"module"}